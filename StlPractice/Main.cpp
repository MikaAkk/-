// Шаблон приложения для финальной часьи курса ООП

#include "pch.h"
#include "Utils.h"
#include "App.h"
#include "MenuItem.h"
#include "Menu.h"

/*
 * 
 * Задача 1.
 * В векторе, состоящем из п вещественных элементов, вычислить (сохранить 
 * вектор в бинарном файле до обработки, восстановить после всех обработок):
 *    1) минимальный элемент;
 *    2) сумму элементов, расположенных после минимального;
 *    3) преобразовать вектор таким образом, чтобы сначала располагались все 
 *       элементы, равные нулю, а потом — все остальные 
 *
 * Задача 2.
 * Написать программу учета заявок на обмен квартир и поиска вариантов обмена.
 * Каждая заявка содержит сведения о двух квартирах: требуемой (искомой) 
 * и имеющейся. Сведения о каждой квартире содержат: 
 *     • количество комнат
 *     • площадь
 *     • этаж
 *     • район.
 * Для хранения данных об обменах (картотеки) использовать контейнерный 
 * класс list. Сохранять картотеку в файле формата CSV.
 * Программа должна обеспечивать выбор с помощью меню и выполнение одной 
 * из следующих функций:
 *     • заполнение картотеки (коллекции заявок) на обмен;
 *     • добавление новой заявки в картотеку и поиск в картотеке подходящего
 *       варианта: при совпадении требований и предложений по количеству комнат
 *       и этажности и различии по показателю «площадь» в пределах 10% выводится 
 *       соответствующая карточка и удаляется из картотеки, в противном случае 
 *       поступившая заявка включается в картотеку;
 *     • вывод картотеки, упорядоченной по количеству комнат;
 *     • вывод картотеки, упорядоченной по районам (для имеющейся квартиры); 
 *     • вывод всей картотеки.
 *
 */

int main()
{
	// настройка вывода в консоль
	init(L"Практика");
	cout << fixed << setprecision(2);
	ostringstream oss;
	constexpr int width = 64; // ширина панели вывода сообщения об ошибке

	// Объект класса для обработки по заданию
	App* app = new App();

	// коды команд меню
	enum Commands {
		CMD_ONE = 1001, // первая команда меню должна иметь код 1001
		CMD_TWO,        // заполнение картотеки (коллекции заявок) на обмен
		CMD_THREE,      // вывод всей картотеки
		CMD_FOUR,       // вывод картотеки, упорядоченной по количеству комнат;
	    CMD_FIVE,       // вывод картотеки, упорядоченной по районам(для имеющейся квартиры);
		CMD_SIX,        // добавление карточки в картотеку (с подбором варианта обмена)
		// и т.д. ...
	};

	// коллекция пунктов меню
	vector<MenuItem> items = {
		MenuItem(CMD_ONE,   "Обработка вектора элементов типа double"),
		MenuItem(CMD_TWO,   "Заполнение картотеки (коллекции заявок) на обмен"),
		MenuItem(CMD_THREE, "Вывод всей картотеки"),
		MenuItem(CMD_FOUR,  "Вывод картотеки, упорядоченной по количеству комнат"),
		MenuItem(CMD_FIVE,  "Вывод картотеки, упорядоченной по районам (для имеющейся квартиры)"),
		MenuItem(CMD_SIX,   "Добавление карточки в картотеку (с подбором варианта обмена)"),

		MenuItem(Menu::CMD_QUIT, "Выход")
	};

	Menu mainMenu(COORD{ 5, 5 }, items, infoColor, hintColor);

	while (true) {
		try {
			cout << color(mainColor) << cls;
			showNavBarMessage(hintColor, "  Обработка данных в контейнерах STL, применение алгоритмов, лямбда-выражений");
			int cmd = mainMenu.navigate();
			cout << color(mainColor) << cls;
			if (cmd == Menu::CMD_QUIT) break;

			switch (cmd) {
				// Выполнение первой команды меню
			case CMD_ONE:
				app->doFirstCommand();
				break;

				// заполнение картотеки (коллекции заявок) на обмен
			case CMD_TWO:
				app->initializeCards();
				break;

				// Вывод всей картотеки
			case CMD_THREE: 
				app->showCards();
				break;

				// Вывод картотеки, упорядоченной по количеству комнат
			case CMD_FOUR: 
				app->orderByRoomsNumber();
				break;

				// Вывод картотеки, упорядоченной по районам (для имеющейся квартиры
			case CMD_FIVE: 
				app->orderByDistrict();
				break;

				// Добавление карточки в картотеку (с подбором варианта обмена)
			case CMD_SIX: 
				app->addCardTest();
				break;

			} // switch
		} // try

		catch (exception& ex) {
			// заливка экрана базовым цветом, вывод строки навигации с сообщением
			cout << color(mainColor) << cls;
			showNavBarMessage(hintColor, "  Ошибка в приложении, нажмите любую клавишу для продолжения");

			oss.str("");
			oss << endlm(4) << left
				<< "\t" << setw(width) << " " << "\n"
				<< "\t" << setw(width) << "    [Ошибка]" << "\n"
				<< "\t    " << left << setw(width - 4) << ex.what() << right << "\n"
				<< "\t" << setw(width) << " " << "\n"
				<< "\t" << setw(width) << " " << "\n"
				<< endlm(4)
				<< right;
			showMessage(oss.str(), errColor, mainColor);
		} // try-catch

		getKey("\tНажмите любую клавишу для продолжения...");
	} // while

	delete app;
	cls();
	return 0;
} // main
